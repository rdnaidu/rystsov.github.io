---
layout: post
title: Warp9
name: Warp9
tags: ["pet"]
desc: "A reactive js GUI library"
abstract: "warp9-desc.html"
has_comments: true
---

<h1>Warp9</h1>

[Warp9](http://rystsov.github.io/warp9) is a yet another reactive javascript GUI library. I created it because all the reactive js libraries I had seen before had fundamental design flows that couldn't be fixed without rewriting the whole libraries. 

<h2>What is wrong with them?</h2>

<h3>Templates don't scale up to interactive applications</h3>

Initially templates are documents with placeholders... and that is fine for static sites. A program prepares data and a template engine fills the gaps in a template. We have different layers that interact via a fixed interface -- common data. It is great because a designer and a programmer are free to organise their areas of responsibility any way they like while they respect the interface.

The idyll is over when we add behaviour. Behaviour is the programmer's responsibility but it is highly coupled with representation. So we can't split the layers now and we lose the interface.

I think we should accept that we can't separate markup and logic and that the idea of templates becomes obsolete. I believe we must follow the divide-and-conquer principle: break our application into parts, mix markup with code into components and use object-oriented or functional decomposition to organise it.

When I started working on Warp9 this idea was very marginal, but now it is a mainstream, look on [React.js](http://facebook.github.io/react) or [Elm](http://elm-lang.org).

Frameworks that still use template based approach are [AngularJS](https://angularjs.org), Knockout, Backbone and others.

<h3>They do 2-way binding wrong</h3>

2-way binding is an awesome thing when you use it but it is a pain in the ass when you develop a library offering 2-way binding interface. If you aren't careful enough your users will meet [accidental memory leaks](http://rystsov.github.io/warp9/pages/competitors/leaks/leaks.html), [repeated diamond shape problem](http://rystsov.github.io/warp9/pages/competitors/diamond/diamond.html) & [observable inconsistent state](http://rystsov.github.io/warp9/pages/competitors/consistency/consistency.html).

For example [Knockout](http://knockoutjs.com) uses a straightforward implementation of the 2-way binding approach that leads to all the mentioned problems.

<h2>Mix of markup and behaviour logic</h2>

Separation of technologies doesn't mean separation of concerns. View and behaviour are coupled and if we put them in different files we don't avoid the coupling. We must face it and use another ways to deal with complexity.

From a software engineer perspective the best way to handle complexity is 
 * Abstraction - to break a system into the smallest independent atoms, to find a similarity between them, to extract an idea of an atom and to reduce the amount of ideas to the minimum sufficient to describe the whole system. In a context of GUI the atoms are buttons, textboxes etc. Since each atom is independent it should contain both view and behaviour.
 * Composition - to combine several atoms into a new entity that can be used as an atom (if we omit the fact that it is composed). For instance, if we look on an address book application, then an address record with a telephone number and an avatar is composed of primitive atoms but the record itself acts as an application specific atom. Those atoms are also known as components.

The default ways to do *Abstraction* and *Composition* with code are object-oriented design and functional approach. If we put markup into code we can use these well known methods to deal with the complexity of modern web applications.

And as a side effect we get a tool for distributing components for free -- all we need is to pack our component as a require.js or commonjs module.

Mixing markup and behaviour doesn't mean that a designer should constantly edit the code, because a lot of layout can be done through CSS.

[React.js](http://facebook.github.io/react) is based on object-oriented approach and [Warp9](http://rystsov.github.io/warp9) uses functional decomposition.

<h2>Reactivity</h2>

Functional programming shines when we talk about data transformations. Let us imagine for a while that we've returned to good old times when all web applications are static. If we need to render a list of addresses into a piece of html, we may end with this procedure

{% highlight javascript %}
function renderStackedWidgets(listOfWidgets) { ... }
function renderAddress(address) { ... }
function renderAddresses(address) {
    return renderWidgets(addresses.map(renderAddress))
}
{% endhighlight %}

If the `renderStackedWidgets` is provided by a library and we've already implemented the `renderAddress` then the implementation of function that renders stacked addresses is very straightforward.

If we fast-forward time to our days this code becomes insufficient because we missed the behaviour. Our list of addresses may be changed over time so we need to update the screen. We need to keep our transformation active all the way, just like in the spreadsheets. With it when you update one cell the others are updated automatically. Modern spreadsheets is a well known example of reactive programming. So we need to add reactivity to keep the code simple. That is exactly what Warp9 does.

<h2>Warp9?</h2>

I'm a fan of the Star Trek series, so I took the name from its universe. The Warp drive invented after the modern reactive engines, makes it possible to travel faster than light and allows humanity to go where no man has been before. I think it is a good name for a reactive library that avoids common pitfalls of the reactive libraries.

<h2>"Rocket science"</h2>

I used a lot of interesting techniques during the development of Warp9. For example I had to maintain an explicit graph of dependencies to avoid [accidental memory leaks](http://rystsov.github.io/warp9/pages/competitors/leaks/leaks.html) and I had to propagate the changes through the graph in a breadth-first approach to handle a [repeated diamond shape problem](http://rystsov.github.io/warp9/pages/competitors/diamond/diamond.html).

When I was working on [reactive primitives](http://rystsov.github.io/warp9/pages/docs/reactive_primitives.html) I dived into monads and monoids to support the reduce operation on a reactive lists. I've read a lot of articles and the most interesting were about treap, rope and finger-tree data structures and about an [incremental regular expressions](http://blog.sigfpe.com/2009/01/fast-incremental-regular-expression.html).

<h2>Conclusion</h2>

I've done this project to sharp my javascript skills and to learn the reactive paradigm. I think I managed pretty well: I avoided the common reactive pitfalls and my version of a [TodoMVC](http://rystsov.github.io/warp9/examples/todomvc/todomvc.html) is only 127 lines of code.

Nevertheless I don't have an intention to maintain and develop the project further. No, I don't think it is perfect. For example, if I could start again I would build Warp9 based on React.js to utilize the idea of virtual DOM (just like [Om](http://swannodette.github.io/2013/12/17/the-future-of-javascript-mvcs)). It is all about time, I've done what I wanted and now it is time to learn something new or to do something that would have a bigger impact.